.LOG

1/15/2021 - 3 hours playing around with Android Studio and stuff
notes and stuff to keep track of

Proposed formula:

	payment = (i*PV)/(1-(1+i)^-n)

		PV = present value of loan (loan amount)
		i = period interest rate expressed as a decimal
		n = number of loan payments
		
	payments toward interest = P*(i/12)
	
		P = principal remaining
		i = period interest rate expressed as a decimal
		
	payment toward principal = PAY - IP
	
		PAY = total payment amount
		IP  = payment towards interest


Key data to collect and return:
	- Customer's Name
	- Name of mortgage type
	- Mortgage Amount
	- Downpayment amount/%
	- interest rate
	- Duration (open field)
	- Additional Payments per Month/year
		- Show amount of interest saved
		- Show shortening in length of loan
		
Data to be created and returned:
	- Ammortization Table
	- Payment Amount
		- Interest Amount
		- Principal Amount
		- Remaining Principal
		
		
Proposed Structure:
	Mortgage object:
		- length of loan/remaining
		- Name of customer
		- Balance (initial/current)
		- down payment
			detect if entered as a percent or dollar number (nobody has a down payment of $100 or less, right?)
			store and calculate either the percentage of dollar amount based on what is not entered
		- Interest Rate

7:48 PM 1/25/2021 - 3 ish hour sprint

Implemented the amortization calculation code, which I believe is supposed to be the most difficult part of this?
Also implemented the first test, which would make sure that the caclulated values don't change anymore.

10:14 PM 1/25/2021 - 3 more hours

pretty much all of the calculation code is working now. just needing to link it to UI which is a bit more frustrating that I thought it would be. Lost a little bit on confidence, particularly with how awful it is to shuffle data back and forth from Kotlin to....whatever the UI elements are done with. Going to call it good for tonight and sleep on it.


11:56 PM 2/1/2021 - 6 more hours

Pivoted all of the code to KotlinJS - still figuring out how to call the functions I need via JS - I may just rewrite it in JavaScript for web. Got most of the site layout figured out, its not pretty yet though.


10:57 PM 2/2/2021 - 4.5 hours

Another pivot. Java console app, since I am running low on time. I have all the meat of the code done, and error checking and input validation. Just need to do the mortgage comparison function and a printed table output for console that doesn't look like garbage.

3:43 PM 2/3/2021 - 2 hours

Regaining confidence. Console looks good, comparisn functions completed. Just trying to figure out a good way to render the tables on console. Probably not going to render side by side, unless i find something neat and useful to do it with.

5:46 PM 2/3/2021 - 2 hours

Pretty much finished it. Table layout is good. Just need some test harness stuff and some hardening against user input errors.

11:07 PM 2/4/2021 - 3 hours

testing and validation. Hardened agianst user input. Rounding seems to be working reliably, as I am only off by about $.16 (or ~$.80 in saved interest) over 30 years on a $312500 mortgage, comparing to them with or without an extra $1000/month payment. That is good enough for me.
